// felix file explorer by, Plu70
if DEBUG then print("<size=75%>loading felix.5pk...(13.691kb)</size>")
command.felix = function(arg1, arg2=0, arg3=0, arg4=0)
  if arg1 == "help" or arg1 == "-h" then return "Usage: felix -- file explorer v 0.2, (wip). Use arrow keys to navigate. Press / to manually type a path."+char(10)+"Advanced: felix [shell|computer|file] -- run felix on filesys of piped object."+char(10)+"e.g. clipb @B 1 | felix -- where BUFFER[1] contained a file, shell or computer."
  action = {}
  action.cursor = 0
  action.last = 0
  min = 0
  action.max = 0

  action.memory = null
  action.buffer = function(arg=null)
    if arg then action.memory = arg
    if not action.memory then return char(176)
    return action.memory.name
  end function
  action.b = function(inf)
    selected = action.get_selected(inf)
    if not selected then return inf
    globals.BUFFER.push(selected)
    conf = user_input("felix:<b> sent "+selected.name+" to BUFFER. Acces via memory_alpha.</b>"+char(10)+"press <<b>anyKey</b>> to continue",0,1)
    return inf
  end function
  action.get_selected = function(infile)
    folders = infile.get_folders
    files = infile.get_files
    contents = folders + files
    if contents.len == 0 then return 0
    if contents.hasIndex(action.cursor) then return contents[action.cursor] else return 0
  end function
  action.r = function(inf) //  remove
    selected = action.get_selected(inf)
    if not selected then return inf
    confirm = user_input("<b>delete</b> "+selected.path+"? [y/N] ||: ",0,1)
    if confirm.lower == "y" or confirm == "RightArrow" then
      check = selected.delete
      if check then print(check) else print("...deleted.")
    else
      print("aborting...")
    end if
    return inf
  end function
  action.z = function(f)
    if action.memory then action.memory = null
    return f
  end function
  action.x = function(inf)
    nf = action.get_selected(inf)
    if nf then action.buffer(nf)
    return inf
  end function
  action.v = function(inf)
    selected = action.get_selected(inf)
    if not selected then return inf
    if not action.memory then return inf
    dest = inf.path
    label = ""
    print("[0] abort "+char(10)+"[1] overwrite "+selected.name+char(10)+"[2] paste to "+inf.path)
    if selected.is_folder then print("[3] paste to "+selected.path)
    opt = user_input("(q=quit)||: ",0,1)
    if opt == "0" or opt.lower == "q" then return inf
    coop = user_input("[<b>0</b>] - Copy or [1] - Move (q=quit)||: ",0,1)
    if coop.lower == "q" then return inf
    if opt == "3" and selected.is_folder then
      dest = selected.path
      label = action.memory.name
      if coop.to_int == 1 then
        action.memory.move(dest, label)
      else
        action.memory.copy(dest, label)
      end if
      return inf
    end if
    if opt == "1" then
      label = selected.name
    else
      if opt == "2" then
        label = action.memory.name
      else
        return inf
      end if
    end if
    if coop.to_int == 1 then
      action.memory.move(dest, label)
    else
      action.memory.copy(dest, label)
    end if
    //action.memory = null
    return inf
  end function
  action.e = function(f)
    // poke, mkdir, rename
    return f
  end function
  action.f = function(inf)
    selected = action.get_selected(inf)
    if not selected then return inf
    print(command.file(selected))
    print(colorGreen+"<u>==================================</u>"+CT)
    wait_for = user_input("press <<b>anyKey</b>> to continue",0,1)
    return inf
  end function
  action.n = function(inf)
    selected = action.get_selected(inf)
    if not selected then return inf
    new_name = user_input("rename_"+selected.name+"(null=abort):> ")
    if new_name == "" or new_name == " " then return inf
    print(selected.rename(new_name))
    return inf
  end function
  action.d = function(inf)
    return action.RightArrow(inf)
  end function
  action.RightArrow = function(inf)
    selected = action.get_selected(inf)
    if not selected then return inf
    if selected.is_folder then // descend into folder
      inf = selected
      action.last = abs(action.cursor)
      action.cursor = 0
      return inf
    end if
    if selected.is_binary then // run prompt
      if selected.name.split(".")[-1] != "so" then
        doit = user_input("launch "+selected.name+"? [y/N] "+char(10)+"||: ",0,1).lower
        if doit == "y" or doit == "RightArrow" then
          if typeof(shell) == "ftpshell" then
            print("launch not available in ftpshell")
            return inf
          end if
          try = shell.launch(selected.path, user_input("params for: "+char(10)+selected.path+" "))
          globals.stack_pool = globals.stack_pool - 1
          if try then print(try)
        end if
        return inf
      else
        if selected.path.split("/")[1] == "lib" then
          if user_input("database this lib.so? [y/N] ||:",0,1).lower == "y" then
            if globals.metaxploit then command.db("-l", selected.name)
          end if
          return inf
        else
          print(colorOrange+"Selected .so is not in /lib "+CT+char(10)+"aborting... ")
          return inf
        end if
      end if
    end if
    if selected.has_permission("r") then
      print(selected.get_content)
      pause = user_input(char(10)+"press <<b>anyKey</b>> to continue",0,1)
    end if
    return inf
  end function

  action.a = function(f)
    return action.LeftArrow(f)
  end function
  action.LeftArrow = function(f)
    if f.name != "/" then
      f = f.parent
      action.cursor = abs(action.last)
    end if
    return f
  end function

  action.w = function(f)
    return action.UpArrow(f)
  end function
  action.UpArrow = function(f)
    if action.cursor <= min then
      action.cursor = action.max
      return f
    end if
    action.cursor = action.cursor - 1
    return f
  end function

  action.s = function(f)
    return action.DownArrow(f)
  end function
  action.DownArrow = function(f)
    if action.cursor >= action.max then
      action.cursor = min
      return f
    end if
    action.cursor = action.cursor + 1
    return f
  end function

  action.f1 = function(f)
    print("-----")
    print("Navigation: [w][a][s][d] or ArrowKeys ")
    print("            [d] - rightArrow to: launch bin, open text, scan .so, descend dir")
    print("Manual  cd: [/] - type path stating with / ")
    print("               -- the [/] initiates manual entry ")
    print("Select:     [x] - selection buffer; sets item to copy from ")
    print("Paste:      [v] - performs a paste using selection buffer ")
    print("               -- to highlighted selection (opens context menu) ")
    print("Remove:     [r] - deletes file ")
    print("Unselect:   [z] - remove item from selection buffer ")
    print("Clr_scrn:   [c] - toggle clear screen or regular view ")
    print("File info:  [f] - get file info/properties for highlighted selection ")
    print("Buffit:     [b] - send highlighted selection to BUFFER ")
    print("Rename:     [n] - rename highlighted selection ")

    print("_____note: launching binaries via felix does NOT activate glasspool_____")
    print("-----")
    pause = user_input("press <<b>anyKey</b>> to continue",0,1)
    return f
  end function

  action.get = function(arg, afile)
    arg = arg.trim
    if arg != "DownArrow" and arg != "UpArrow" and arg != "LeftArrow" and arg != "RightArrow" then arg = arg.lower
    //print(arg)
    if action.hasIndex(arg) then
      a = @action[arg]
      return a(afile)
    else
      return afile
    end if
  end function

  action.branch = function(f, arg) // takes a file object
    file_object = f
    f_path = arg.split("/")
    if f_path[0] == "" then f_path[0] = "/"
    while file_object.name != "/"
      file_object = file_object.parent
    end while
    print("f_path: "+f_path) // debug
    print("arg: "+arg)       // debug
    while file_object.path != arg.trim
      globals.grepped_file = null
      globals.list_files(file_object, f_path.pull, 1,"N") // requires 5hell or 5hell.so
      if globals.grepped_file then file_object = globals.grepped_file else return f
    end while
    return file_object
  end function

  path_contents = function(f)
    folders = f.get_folders
    files = f.get_files
    contents = folders + files
    action.max = contents.len - 1
    output = f.permissions+" "+f.owner+" "+f.group+" "+f.size+" "+char(1068)+"["+f.is_binary+"] "+f.path + char(10) + char(166) + " [ " + action.buffer + " ]"
    i = 0
    get = ""
    c_put = ""
    for c in contents
      c_put = c.permissions+" "+c.owner+" "+c.group+" "+c.size+" "+char(1068)+"["+c.is_binary+"] "+c.name
      output = output+char(10)+c_put
      if i == action.cursor then
        get = c.name
        if get == null then get = ""
      end if
      i = i + 1
    end for
    if get then print( format_columns(output).replace(get,colorOrange+get+CT).replace(".src",colorCyan+".src"+CT).replace(".exe",colorRed+".exe"+CT).replace(".txt",colorWhite+".txt"+CT).replace(".log",colorLightBlue+".log"+CT).replace(".jpg",colorLightBlue+"</b>.jpg</color>").replace(".so",colorGold+"</b>.so</color>").replace(".html",colorCyan+".html"+CT) ) else print(format_columns(output))
    return
  end function

  ////BEGIN MAINish
  felix = function(file)
    currentPath = file.path
    contents = file.get_folders + file.get_files
    action.max = contents.len - 1
    CLEAR = -1
    while true
      if CLEAR > 0 then
        clear_screen
        button_c = "<b>C</b>"
      else
        button_c = "<b>c</b>"
      end if
      path_contents(file)
      print(colorLightBlue+currentPath+CT)
      print("[F1] help [w][a][s][d] == [^][<][v][>] [q] quit")
      print("[z] clr slct [x] select [v] paste [f] file [n] rename ")
      input = user_input("["+button_c+"] tog clrs [r] remove [b] buffit ||: ",0,1)
      print
      if input.lower == "c" then
        CLEAR = (CLEAR * (-1)) //  flipbit
        continue
      end if
      if input.lower == "q" then return "Goodbye."
      if input == "/" then
        input = input + user_input(input,0,0)
        file = action.branch(file, input)
        currentPath = file.path
        continue
      end if
      file = action.get(input, file)
      currentPath = file.path
    end while
    return 0
  end function
  /// END MAINish
  init = function(file_object)
    print(colorOrange+"Felix file explorer v 1.1 by Plu70"+CT)
    print(colorLightBlue+"-----------------------------------------"+CT)
    while file_object.name != "/"
      file_object = file_object.parent
    end while
    return felix(file_object)
  end function
  if typeof(arg1) == "shell" then return init(arg1.host_computer.File("/"))
  if typeof(arg1) == "computer" then return init(arg1.File("/"))
  if typeof(arg1) == "file" then return init(arg1)
  return init(localmachine.File("/"))
end function

command.file = function(arg1, arg2=0, arg3=0, arg4=0)
	if not arg1 or arg1 == "help" or arg1 == "-h" then return "Usage: file [/path|file_object] -- file properties information. Takes path or file_object and returns string. "+char(10)+"Usage: file [-l|-c] [/path|file_object] -- returns int lines or int chars for given file."+char(10)+"Example: (copy the command in bold)<b> tree /root Config 0 N | file </b>"+char(10)+"Advanced: file -b [/path|file_object] -- send file to BUFFER (and display file info)"
  get_lines = false
	get_chars = false
  to_buffer = false
	if arg1 == "-l" or arg1 == "-c" or arg1 == "-b" then
		if arg1 == "-l" then get_lines = true
		if arg1 == "-c" then get_chars = true
    if arg1 == "-b" then to_buffer = true
		if arg2 then arg1 = arg2 else return "file: input error"
	end if
	if typeof(arg1) == "string" then
		file = null
		file = globals.get_file(arg1)
		if not file then return "id: error: "+arg1+" not found."
		arg1 = file
	end if
	if typeof(arg1) == "file" then
    imp_status = arg1.allow_import
    if imp_status then imp_status = "Yes" else imp_status = "No"
  	file_id_info = ["name: "+arg1.name, "path: "+arg1.path, "size: "+arg1.size, "owner: "+arg1.owner, "group: "+arg1.group, "perms: "+arg1.permissions]
		if arg1.is_folder then
			file_id_info.push("type: folder")
			conts = arg1.get_folders.len + arg1.get_files.len
			file_id_info.push("subs: "+conts)
		else
			if arg1.is_binary then
				file_id_info.push("type: binary")
        file_id_info.push("import: "+imp_status)
			else
				file_id_info.push("type: ascii")
				lines = 0
				chars = 0
				if arg1.get_content then
					lines = arg1.get_content.split(char(10)).len
					chars = arg1.get_content.values.len
				end if
				file_id_info.push("lines: "+str(lines))
				file_id_info.push("chars: "+str(chars))
			end if
		end if
		if get_lines then
			if file_id_info.indexOf("type: binary") == null then return str(lines) else return "file: "+arg1.path+" is binary"
		end if
		if get_chars then
			if file_id_info.indexOf("type: binary") == null then return str(chars) else return "file: "+arg1.path+" is binary"
		end if
    print(colorGreen+"<u>==================================</u>"+CT)
    if to_buffer then
      globals.BUFFER.push(arg1)
      print("file: <b>"+arg1.name+"</b> sent to <b>BUFFER</b>")
    end if
		return format_columns(file_id_info.join(char(10)))
	end if
	return "file: unknown error"
end function
