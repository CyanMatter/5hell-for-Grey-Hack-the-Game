// battleship by Plu70, aka ra'al, aka jhook777  2021
// start with 10 x 10 grid
// 24.905kb
// valid launch params:
//
// -c -- all color lines are null
// -d -- debug mode, no wait(1)'s and verbose
// -dt - early terminate: spawn ships, print locations and end
// -s -- self play: ai vs rng
// -cd, -cd -s, -d -s, -c -s, also valid combinations
//
// order matters with launch params
// ai is marginally better than random*
////////////////////////
game_file = null  // single player for now
DIFFICULTY = "hard" // lol jk, still need better ai algorithm. easy or medium available at runtime
EARLYTERM = false
self_play = false
//if params.len >= 1 and (params[0] == "-s" or params [1] == "-s") then self_play = true
//debug = globals.DEBUG
disable_color = false

/////////
if s == "-s" then self_play = true
////////////////////////
globals.MIN = 0 // minimum X/Y values for grid size
globals.MAX = 9 // maximum X/Y values for grid size
rng = range(MIN,MAX)
rnd = range(MIN,MAX)
rng.shuffle
rnd.shuffle

///BEGIN GRAPHICS//////

print_logo = function()
	print(colorRed+" _           _   _   _           _     _         "+CT)
	print(colorGreen+"| |         | | | | | |         | |   (_)       "+CT)
	print(colorGreen+"| |__   __ _| |_| |_| | ___  ___| |__  _ _ __   "+CT)
	print(colorGreen+"| '_ \ / _` | __| __| |/ _ \/ __| '_ \| | '_ \  "+CT)
	print(colorRed+"| |_) | (_| | |_| |_| |  __/\__ \ | | | | |_) | "+CT)
	print(colorGreen+"|_.__/ \__,_|\__|\__|_|\___||___/_| |_|_| .__/  "+CT)
	print(colorGreen+"                                       | |      "+CT)
	print(colorGreen+"                                       |_|      "+CT)

end function

display_ship_one = function()

	ship_one = ["                                                                       .",	"                                     # #  ( )                           ","                                  ___#_#___|__                          ",	"                              _  |____________|  _                      ",	"                       _=====| | |            | | |==== _               ",	"                 =====| |.---------------------------. | |====          ",	"   <--------------------'   .  .  .  .  .  .  .  .   '--------------/   ",	"     \                                                             /    ",	colorLightBlue+"  wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww "+CT,	colorLightBlue+"wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww"+CT,	colorLightBlue+"   wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww  "+CT]
	for ln in ship_one
		print(ln)
	end for
end function

display_ship_two = function()

	ship_two = ["                                                                               ","                                     |__                                       ",	"                                     |\/                                       ",	"                                     ---                                       ",	"                                     / | [                                     ",	"                              !      | |||                                     ",	"                            _/|     _/|-++'                                    ",	"                        +  +--|    |--|--|_ |-                                 ",	"                     { /|__|  |/\__|  |--- |||__/                              ",	"                    +---------------___[}-_===_.'____                 /\       ",	"                ____`-' ||___-{]_| _[}-  |     |_[___\==--            \/   _   ",	" __..._____--==/___]_|__|_____________________________[___\==--____,------' .7 ",	"|                                                                     BB-61/   ",	" \_________________________________________________________________________|   ",	colorLightBlue+"  Matthew Bacewwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww"+CT,	colorLightBlue+"wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww"+CT	]
	for ln in ship_two
		print(ln)
	end for
end function

display_ship_three = function()
	// stub
end function

display_long_rule = function()
	print(colorGreen+"</b>[.0....1....2.....3....4.....5....6....7.....8....9.]</color>")  // adjust this to fit your terminal
end function
/////END GRAPHICS /////////

/////// SANITY CHECK /////
check_sanity = function(sobj) // ensure ships don't overlap
	if globals.DEBUG then print("Checking Sanity...")
	if globals.DEBUG then print(sobj.frigate)
	if globals.DEBUG then print(sobj.cruiser)
	if globals.DEBUG then print(sobj.battleship)

	bshipX = sobj.battleship.X
	bshipY = sobj.battleship.Y
	cshipX = sobj.cruiser.X
	cshipY = sobj.cruiser.Y
	fshipX = sobj.frigate.X
	fshipY = sobj.frigate.Y

	if globals.DEBUG then print( bshipX  )

	collision = 0
	static_ship = "battleship"

	for fx in fshipX
		if fx > globals.MAX then collision = "out_of_bounds"
		if cshipX.indexOf(fx) >= 0 then
			for fy in fshipY
				if cshipY.indexOf(fy) >= 0 then
					collision = "frigate"
					static_ship = "cruiser"
					if fy > globals.MAX then collision = "out_of_bounds"
				end if
			end for
		end if
	end for

	for bx in bshipX
		if bx > globals.MAX then collision = "out_of_bounds"
		if globals.DEBUG then print("bx:"+bx)
		if globals.DEBUG then print("cruiser: index of bx: "+cshipX.indexOf(bx))
		if cshipX.indexOf(bx) >= 0 and cshipX.hasIndex(cshipX.indexOf(bx)) then
			for by in bshipY
				if globals.DEBUG then print("by:"+by)
				if cshipY.indexOf(by) >= 0 and cshipY.hasIndex(cshipY.indexOf(by)) then collision = "cruiser"

			end for
		end if

		if fshipX.indexOf(bx) >= 0 then
			for by in bshipY
				if fshipY.indexOf(by) >= 0 then collision = "frigate"
				if by > globals.MAX then collision = "out_of_bounds"
			end for
		end if

	end for
	for cx in cshipX
		if cx > globals.MAX then collision = "out_of_bounds"
	end for
	for cy in cshipY
		if cy > globals.MAX then collision = "out_of_bounds"
	end for
	if globals.DEBUG then print("coll:"+collision)
	if collision then
		if globals.DEBUG then print("Handling collision between "+static_ship+" and "+collision+"...")
		// this tactic is known as 'do something, even if it's wrong'
		nX = sobj[collision]["X"]
		nY = sobj[collision]["Y"]
		if nX.len > nY.len then
			if nY[0] <= 0 then nY[0] = 3
			if nY[0] >= 9 then nY[0] = 5
			if nY[0] == 2 or nY[0] == 4 or nY[0] == 6 then nY[0] = nY[0] + 1
			rr = range(-1,1)
			rr.shuffle
			nY[0] = nY[0] + rr.pop
			if nY[0] > globals.MAX then collision = "out_of_bounds"
		else
			if nX[0] <= 0 then nX[0] = 3
			if nX[0] >= 9 then nX[0] = 5
			if nX[0] == 2 or nX[0] == 4 or nX[0] == 6 then nX[0] = nX[0] + 1
			rr = range(-1,1)
			rr.shuffle
			nX[0] = nX[0] + rr.pop
			if nX[0] > globals.MAX then collision = "out_of_bounds"
		end if
	end if
	//////
	if globals.DEBUG then print("Handled. Back propagating...")
	if globals.DEBUG and not collision then print("Sanity check complete.")
	return collision// true for recursion or false if no collisions and sane
end function
//// END SANITY CHECK //////

map = {}
map.grid = []
map.make = function()
	map.grid = range(globals.MIN,globals.MAX)
	for e in range(globals.MIN,globals.MAX)
		map.grid[e] = range(globals.MIN,globals.MAX)
		for c in map.grid[e]
			if globals.DEBUG then
				map.grid[e][c] = e+","+c
			else
				map.grid[e][c] = colorLightBlue+"www"+CT
			end if
		end for
	end for
end function
map.get_cell = function(x,y)
	return map["grid"][x][y]
end function
map.edit_cell = function(xy,beef,actor)
	split = xy.split(" ")
	if split.len < 2 then
		split.push("0")
		if split.len < 2 then
			split.push("0")
		end if
	end if
	x = split[0].val
	y = split[1].val
	edit = "www"
	if beef > 0 then // hit
		if actor == computa.label then
			edit = colorOrange+"***"+CT
		else
			edit = colorRed+"***"+CT
		end if
	else
		if beef == 0 then // miss
			if actor == computa.label then
				edit = colorLightBlue+"###"+CT
			else
				edit = colorWhite+"###"+CT
				if map["grid"][x][y] == colorLightBlue+"###"+CT then edit = (colorWhite+"#"+CT+colorLightBlue+"#"+CT+colorWhite+"#"+CT)
			end if
		end if
	end if
	if globals.DEBUG then print("X:"+x+" Y:"+y+" edit:"+edit)
	if map["grid"][x][y] == (colorRed+"***"+CT) then
		if beef then
			edit = colorRed+"*"+CT+colorOrange+"*"+CT+colorRed+"*"+CT
		else
			return beef
		end if
	end if
	if beef and map["grid"][x][y] == colorOrange+"***"+CT then edit = colorRed+"*"+CT+colorOrange+"*"+CT+colorRed+"*"+CT
	if not beef and map["grid"][x][y] == colorOrange+"***"+CT then edit = (colorWhite+"#"+CT+colorOrange+"#"+CT+colorWhite+"#"+CT)
	if not beef and map["grid"][x][y] == (colorWhite+"###"+CT) then edit = (colorWhite+"#"+CT+colorLightBlue+"#"+CT+colorWhite+"#"+CT)
	map["grid"][x][y] = edit
	return beef
end function
map.display_grid = function()
	buf = ""
	y = globals.MAX
	while y >= globals.MIN
		for x in range(globals.MIN,globals.MAX)
			buf = buf + "." + map.get_cell(x,y) + "."
		end for
		buf = buf + colorGreen+"</b>.["+y+"]</color>"+ char(10)
		y = y - 1
	end while
	print(buf)
	display_long_rule
end function
map.make



player = {}
player.label = ""
player.opponent = ""
player.BUFFER = {}
player.position = {}
player.display_ship_coordinates = function()
	for c in self.position
		print(">"+c.value.label+":")
		print("[X: "+c.value.X+" Y:"+c.value.Y+"]")
	end for
end function
player.fire = function(coords)
	aim = coords.split(" ")
	print(colorOrange+self.label + " fires at " + aim[0] + ", " + aim[1] + " and... "+CT)
	wait(1)
	count = 0
	for ship_obj in self.opponent.position
		if globals.DEBUG then print(ship_obj)
		shipX = ship_obj.value.X
		shipY = ship_obj.value.Y
		count = count + 1
		for sx in shipX
			if aim[0].val == sx then
				for sy in shipY
					if aim[1].val == sy then
						print(colorRed+"<b>HITS!</b>"+CT+char(10))
						summary.accuracy.update(self.label, "hit", coords)
						return count
					end if
				end for
			end if
		end for
	end for
	print("<b>MISSES!</b>"+char(10))
	summary.accuracy.update(self.label, "miss", coords)
	return 0
end function
player.spawn_ship = function(ship)
	top_edge = false
	bottom_edge = false
	left_edge = false
	right_edge = false
	i = 0
	if ship.hasIndex("frigate") then i = ship.frigate
	if ship.hasIndex("cruiser") then i = ship.cruiser
	if ship.hasIndex("battleship") then i = ship.battleship
	if globals.DEBUG then print("["+colorWhite+ship.label+CT+"]")

	transmform = function(sob)
		if sob.X[0] == globals.MIN then left_edge = true
		if sob.X[-1] == globals.MAX then right_edge = true
		if sob.Y[0] == globals.MIN then bottom_edge = true
		if sob.Y[-1] == globals.MAX then top_edge = true
		if sob.X.len > 1 then
			top_edge = true
			bottom_edge = true
		end if
		if sob.Y.len > 1 then
			left_edge = true
			right_edge = true
		end if
		vote_down = 1
		vote_up = 1
		vote_left = 1
		vote_right = 1
		if top_edge then vote_up = 0
		if bottom_edge then vote_down = 0
		if left_edge then vote_left = 0
		if right_edge then vote_right = 0
		rn = range(1,10) // do not set globals.MIN to zero
		rn.shuffle
		vote_up = (vote_up * rn.pop)
		if globals.DEBUG then print(vote_up+":up")
		rn.shuffle
		vote_down = (vote_down * rn.pop)
		if globals.DEBUG then print(vote_down+":down")
		rn.shuffle
		vote_right = (vote_right * rn.pop)
		if globals.DEBUG then print(vote_right+":right")
		rn.shuffle
		vote_left = (vote_left * rn.pop)
		if globals.DEBUG then print(vote_left+":left")
		tally = [vote_up,vote_down,vote_left,vote_right]
		tally.sort
		tally.reverse
		winner = tally[0]
		if globals.DEBUG then print(winner)
		if winner == 0 then return
		if winner == vote_up then //up
			sob.Y.push(sob.Y[-1]+1)
			sob.Y.sort
			return
		end if
		if winner == vote_down then //down
			sob.Y.push(sob.Y[0]-1)
			sob.Y.sort
			return
		end if
		if winner == vote_left then // left
			sob.X.push(sob.X[0]-1)
			sob.X.sort
			return
		end if
		if winner == vote_right then //right
			sob.X.push(sob.X[-1]+1)
			sob.X.sort
			return
		end if
	end function

	while i > 0
		transmform(ship)
		i = i - 1
	end while
end function

player1 = new player
player1.label = "Player"
player1.BUFFER = {}
player1.position = {}
player1.position.frigate = {"X":[0], "Y":[0], "frigate":1, "label":"frigate"}
player1.position.cruiser = {"X":[0], "Y":[0], "cruiser":2, "label":"cruiser"}
player1.position.battleship = {"X":[0], "Y":[0], "battleship":4, "label":"battleship"}  // position ship then spawn_ship
player1.setup = function(x,y)
	self.position.frigate.X[0] = x[0]
	self.position.frigate.Y[0] = y[0]
	x.shuffle
	y.shuffle
	self.position.cruiser.X[0] = x[0]
	self.position.cruiser.Y[0] = y[0]
	x.shuffle
	y.shuffle
	self.position.battleship.X[0] = x[0]
	self.position.battleship.Y[0] = y[0]
	self.spawn_ship(self.position.frigate)
	self.spawn_ship(self.position.cruiser)
	self.spawn_ship(self.position.battleship)  // position ship then spawn_ship
	while check_sanity(self.position)
	end while
end function
player1.confirm = function(cmd)
	// cmd is user_input so respond only to correct input and drop all else
	if cmd == "" then cmd = "0 0"
	aim = cmd.split(" ")
	if aim.len < 2 then
		aim.push("0")
		if aim.len < 2 then
			aim.push("0")
		end if
	end if
	aim[0] = aim[0].val
	aim[1] = aim[1].val
	cmd = aim.join(" ")
	if player1.BUFFER.hasIndex(cmd) then
		print(colorOrange+"That would be a waste of ammunition!"+CT)
		return 0 // command denied
	else
		player1.BUFFER.push(cmd)
	end if
	aim = cmd.split(" ")
	if aim[0].val > globals.MAX or aim[1].val > globals.MAX or aim[0].val < globals.MIN or aim[1].val < globals.MIN then
		print(colorOrange+"</b>Target designation is out of bounds!</color>")
		return 0
	end if
	return cmd // confirmed command
end function


/// BEGIN Computa
computa = new player
computa.label = "Computa"
computa.BUFFER = {}
computa.position = {}
computa.position.frigate = {"X":[0], "Y":[0], "frigate":1, "label":"frigate"} // x_array, y_array, label:# of transorms in spawn_ship
computa.position.cruiser = {"X":[0], "Y":[0], "cruiser":2, "label":"cruiser"} // adjust check_score when adding new ship classes!
computa.position.battleship = {"X":[0], "Y":[0], "battleship":4, "label":"battleship"} // position ship then spawn_ship
computa.AI = {}
computa.AI.ghost_ship = {}
computa.AI.ghost_ship.frigate = {"X":[1], "Y":[1], "frigate":1, "label":"ghost_frigate"}
computa.AI.ghost_ship.cruiser = {"X":[8], "Y":[8], "cruiser":2, "label":"ghost_cruiser"}
computa.AI.ghost_ship.battleship = {"X":[5], "Y":[5], "battleship":4, "label":"ghost_battleship"}
computa.AI.c_list = []
computa.wake_AI = function()
	self.spawn_ship(self.AI.ghost_ship.battleship)
	self.spawn_ship(self.AI.ghost_ship.frigate)
	self.spawn_ship(self.AI.ghost_ship.cruiser)
	t_x = []
	t_y = []
	t_cmd = ""
	for s in self.AI.ghost_ship
		t_x = s.value.X
		t_y = s.value.Y
		t_cmd = t_x[0]+" "+t_y[0]
		self.AI.c_list.push(t_cmd)
	end for
end function
computa.setup = function(x,y)
	self.position.frigate.X[0] = x[0]
	self.position.frigate.Y[0] = y[0]
	x.shuffle
	y.shuffle
	self.position.cruiser.X[0] = x[0]
	self.position.cruiser.Y[0] = y[0]
	x.shuffle
	y.shuffle
	self.position.battleship.X[0] = x[0]
	self.position.battleship.Y[0] = y[0]
	self.spawn_ship(self.position.frigate)
	self.spawn_ship(self.position.cruiser)
	self.spawn_ship(self.position.battleship)  // position ship then spawn_ship
	while check_sanity(self.position)
	end while
end function
computa.AI.update_ghosts = function(new_X, new_Y, new_T)
	self.ghost_ship.frigate.X = new_X
	self.ghost_ship.frigate.Y = new_Y
	self.ghost_ship.cruiser.X = new_X
	self.ghost_ship.cruiser.Y = new_Y
	self.ghost_ship.battleship.X = new_X
	self.ghost_ship.battleship.Y = new_Y
	self.ghost_ship.frigate.frigate = new_T
	self.ghost_ship.cruiser.cruiser = new_T
	self.ghost_ship.battleship.battleship = new_T
	computa.spawn_ship(self.ghost_ship.frigate)
	computa.spawn_ship(self.ghost_ship.cruiser)
	computa.spawn_ship(self.ghost_ship.battleship)
end function
computa.AI.alpha = function()
	last_shot = summary.accuracy.Computa.hist[-2]
	if globals.DEBUG then print("last shot: "+last_shot)
	last_action = summary.accuracy.Computa.hist[-1]
	if self.c_list.len < 1  or last_action == "hit" then //c_list_empty = true
		new_C = last_shot.split(" ")
		if globals.DEBUG then print(new_C)
		new_x = [new_C[0].val]
		new_y = [new_C[1].val]
		new_t = 0
		if last_action == "miss" then
			new_t = 6
		else
			new_t = 2
		end if
		self.purge_ghosts
		self.update_ghosts(new_x,new_y, new_t)
		t_x = []
		t_y = []
		t_cmd = ""
		for s in self.ghost_ship
			t_x = s.value.X
			t_y = s.value.Y
			t_y.shuffle
			t_x.shuffle
			t_cmd = t_x[0]+" "+t_y[0]
			if globals.DEBUG then print("Pushing "+t_cmd+" to c_list...")
			if not self.c_list.hasIndex(t_cmd) then self.c_list.push(t_cmd)
		end for
	end if
	if self.c_list.len < 1 then // panic
		rng.shuffle
		rnd.shuffle
		t_cmd = [rng[0], rnd[0]]
		t_cmd = t_cmd.join(" ")
		self.c_list.push(t_cmd)
	end if
	self.c_list.shuffle
	return  self.c_list.pop // string of type "X Y" where X and Y are within outer.MIN, MAX
end function
computa.AI.panic_level = 4
computa.AI.purge_ghosts = function()
	self.ghost_ship.frigate.X = []
	self.ghost_ship.frigate.Y = []
	self.ghost_ship.cruiser.X = []
	self.ghost_ship.cruiser.Y = []
	self.ghost_ship.battleship.X = []
	self.ghost_ship.battleship.Y = []
end function
computa.AI.omega = function() // when computa has found all three of Payer1's ships
	last_shot = summary.accuracy.Computa.hist[-2]
	hl = summary.accuracy.Computa.hit_list
	if globals.DEBUG then print("hit_list: "+hl)
	last_action = summary.accuracy.Computa.hist[-1]
	if self.c_list.len < 1  or last_action == "hit" then
		hl.shuffle
		new_C = hl[0].split(" ")
		if globals.DEBUG then print(new_C)
		new_x = [new_C[0].val]
		new_y = [new_C[1].val]
		new_t = 0
		if last_action == "miss" then
			new_t = 2
		else
			new_t = 1
		end if
		self.purge_ghosts
		self.update_ghosts(new_x,new_y, new_t)
		t_x = []
		t_y = []
		t_cmd = ""
		for s in self.ghost_ship
			t_x = s.value.X
			t_y = s.value.Y
			t_y.shuffle
			t_x.shuffle
			t_cmd = t_x[0]+" "+t_y[0]
			if globals.DEBUG then print("Pushing "+t_cmd+" to c_list...")
			if not self.c_list.hasIndex(t_cmd) then self.c_list.push(t_cmd)
		end for
	end if
	if self.c_list.len < 1 then // panic
		rng.shuffle
		rnd.shuffle
		t_cmd = [rng[0], rnd[0]]
		t_cmd = t_cmd.join(" ")
		self.c_list.push(t_cmd)
	end if
	self.c_list.shuffle
	return  self.c_list.pop // string of type "X Y" where X and Y are within outer.MIN, MAX
end function
computa.get_command = function() // obvious stub needs obvious improvement
	ccommand = ""
	if DIFFICULTY == "easy" then
		ccommand = [rng[0], rnd[0]]
		ccommand = ccommand.join(" ")
	else
		if computa.score[0] > 0 and computa.score[1] > 0  and computa.score[2] > 0 then
			// all ships found, prepare for gg
			ccommand = self.AI.omega
		else
			//if computa.score[0] > 0 or computa.score[1] > 0  or computa.score[2] > 0 then
				//ccommand = [rng[0], rnd[0]]
				//ccommand = ccommand.join(" ")
		//	else
				ccommand = self.AI.alpha
			//end if
		end if
	end if
	if globals.DEBUG then print("sending: "+ccommand)
	rng.shuffle
	rnd.shuffle
	if self.BUFFER.hasIndex(ccommand) then
		if globals.DEBUG then print("!!Repeat detected!!")
		self.AI.panic_level = 8
		ccommand = false
		//return ccommand
	else
		self.BUFFER.push(ccommand)
		self.AI.panic_level = 4
		//return ccommand
	end if
	return ccommand
end function
//// END Computa


if globals.DEBUG then print("Initializing players...")
rng = range(MIN,MAX)
rnd = range(MIN,MAX)

rng.shuffle
rnd.shuffle

computa.setup(rng,rnd)
computa.wake_AI

rnd.shuffle
rng.shuffle

if globals.DEBUG then print("...readying player1...")
player1.setup(rng,rnd)

player1.opponent = computa
computa.opponent = player1

player1.score = [0,0,0] // [frigate,cruiser,battleship]
computa.score = [0,0,0] // [2_tokill,3 tokill,5 tokill] (transorms + 1 to kill)
check_score = function(bit,act)
	if globals.DEBUG then print("Scoring...")
	if globals.DEBUG then print(act+":"+bit)
	if act == player1.label then
		if not bit then return 1
		player1.score[bit-1] = player1.score[bit-1] + 1
		if player1.score.sum == 10 then return 0 // command BUFFER restricts repeat shots
		return 1
	else
		if not bit then return 1
		computa.score[bit-1] = computa.score[bit-1] + 1
		if computa.score.sum == 10 then return 0
		return 1
	end if
end function

DATASET = {}
DATASET.accuracy = {}
DATASET.accuracy.Computa = {}
DATASET.accuracy.Player = {}
summary = new DATASET
summary.purge = function()
	if globals.DEBUG then print("purging...")
	self.accuracy.Computa.hist = []
	self.accuracy.Player.hist = []
end function
summary.accuracy.update = function(lbl, event, crds)
	//summary.purge
	if globals.DEBUG then print("updating..."+lbl)
	if lbl == self.Player.label and globals.DEBUG then print("player found!")
	summary["accuracy"][lbl]["hist"].push(crds)
	if globals.DEBUG then print(crds)
	if event == "hit" then // hit
		summary["accuracy"][lbl]["Hits"] = summary["accuracy"][lbl]["Hits"] + 1
		if globals.DEBUG then print("pushing "+crds+" to hit_list...")
		summary["accuracy"][lbl]["hit_list"].push(crds)
	else // miss
		summary["accuracy"][lbl]["Misses"] = summary["accuracy"][lbl]["Misses"] + 1
	end if
	summary["accuracy"][lbl]["hist"].push(event)
end function
summary.accuracy.report = function()
	if globals.DEBUG then print("reporting...")
	last_computer_shot = self.Computa.hist
	last_player_shot = self.Player.hist
	if last_computer_shot[-1] == "hit" then
		revent = (colorRed+"<b>HIT!</b>"+CT)
	else
		revent = "<b>MISSED!</b>"
	end if
	print(colorOrange+self.Computa.label+" fired at "+last_computer_shot[-2]+" and "+revent)
	if last_player_shot[-1] == "miss" then
		revent = "<b>MISSED!</b>"
	else
		revent = (colorRed+"<b>HIT!</b>"+CT)
	end if
	print(colorOrange+self.Player.label+" fired at "+last_player_shot[-2]+" and "+revent)
end function
summary.widget = function()
	l = self.accuracy.Player.label
	h = self.accuracy.Player.Hits
	m = self.accuracy.Player.Misses
	s = m+h
	print(colorWhite+"|"+l+" accuracy: "+ h +colorGreen+"/"+colorWhite+s+"|"+CT)
end function
summary.accuracy.init = function()
	self.Computa = {"label":"Computa", "Hits":0, "Misses":0, "hist":["nothing",0], "hit_list":[]}
	self.Player = {"label":"Player", "Hits":0, "Misses":0, "hist":["nothing",0], "hit_list":[]}
end function
summary.accuracy.init


if globals.DEBUG then print("...init complete. Starting main...")
////// BEGIN MAIN /////////
battleship = function()
	playing = true
	first_run = true
	if EARLYTERM then playing = false
	if globals.DEBUG and EARLYTERM then player1.display_ship_coordinates
	if globals.DEBUG and EARLYTERM then computa.display_ship_coordinates
	if user_input("Select a difficulty level:"+char(10)+"[EASY] - Commander Rander"+char(10)+"[MEDIUM] - Captain Chao "+char(10)+["||: "]).lower != "EASY" then
		print("MEDIUM difficulty selected. Good luck!")
		DIFFICULTY = "medium"
	else
		print("EASY difficulty selected. Good luck!")
		DIFFICULTY = "easy"
	end if
	///// game starts here
	while playing
		if not globals.DEBUG then clear_screen
		if not first_run then print_logo

		player1.display_ship_coordinates
		if globals.DEBUG then computa.display_ship_coordinates
		if not first_run then summary.accuracy.report
		if globals.DEBUG then print(player1.score)
		if globals.DEBUG then print(computa.score)
		print(colorGreen+"</b>//////////////////////////////////////////////////////</color>")

		map.display_grid
		if not first_run then summary.widget

		first_run = false
		command = 0
		if self_play then
			rng.shuffle
			rnd.shuffle
			command = [rng[0], rnd[0]]
			command = command.join(" ")
			if not globals.DEBUG then wait(1)
		else
			print("q=quit")
			command = user_input("Enter coordinates [0-9] as [x y]: ")
			if command.lower == "q" then return "abandoning ship..."
		end if
		command = player1.confirm(command)
		if command == 0 then continue // belay that order!
		if not globals.DEBUG then clear_screen
		display_ship_one
		playing = check_score(map.edit_cell(command, player1.fire(command), player1.label), player1.label)

		if not playing then return("<b>You sunk all of computa's battleships! You Win!</b>")

		rng.shuffle // vestigial shuffle
		rnd.shuffle // vestigial shuffle
		wait(1)
		if not globals.DEBUG then clear_screen

		display_ship_two
		ai_turn = true
		while ai_turn
			command = computa.get_command
			if globals.DEBUG then print("...recieved: "+command)
			if command == false then continue
			playing = check_score(map.edit_cell(command, computa.fire(command), computa.label), computa.label)
			if not playing then return("<b>Computa sunk all of your battleships! You lose!</b>")
			ai_turn = false
			wait(1)
			if not globals.DEBUG then clear_screen
		end while
	end while
end function

print_logo
battleship
